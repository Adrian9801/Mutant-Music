export declare class MTC {
    private chanelOne;
    private chanelTwo;
    private masterMTC;
    private NumPrmSector;
    private NumPrmArea;
    private saveDataUnMatchOne;
    private saveDataUnMatchTwo;
    private dumppi;
    private reptit;
    private lastSeconS2;
    private auxPZoneA;
    private auxPZoneB;
    private pointsAndTimesS2;
    private pointPositionS2;
    private zonesPointsS2;
    private zonesAreaS2;
    private totalAreasS2;
    private totalAreaOrg;
    private zonesAreaSong;
    private zone1;
    private zone2;
    private zone3;
    private zone4;
    private zone5;
    private zone6;
    private zone7;
    private zone8;
    private audioData;
    private audioDataAux;
    constructor();
    setAudioData(pAudioData: any): void;
    setDataS2(pPointsAndTimesS2: number[], pPointPositionS2: number[], pZonesPointsS2: number[], pZonesAreaS2: number[], pTotalAreasS2: number[], pTotalAreaor: number[]): void;
    setDataSong(pZ1: number[][], pZ2: number[][], pZ3: number[][], pZ4: number[][], pZ5: number[][], pZ6: number[][], pZ7: number[][], pZ8: number[][]): void;
    makeMT(pmasterArea: number, pChanel: number): void;
    masterMC(pZoneA: number[][], pZoneB: number[][], pChanel: number): void;
    getZone(zone: number): (number[][]);
    gps(point: number): number;
    isRepit(point: number): boolean;
    giveTime(pSecond: number): void;
    GetMatchUnOne(): number[][];
    getAudioDataUnMatch(): any;
    GetMatchUnTwo(): number[][];
    GetMatchOne(): number[];
    GetMatchTwo(): number[];
    buildMatch(pChanel: number, pAudioData: any, pStart: number, pFinal: number): void;
}
